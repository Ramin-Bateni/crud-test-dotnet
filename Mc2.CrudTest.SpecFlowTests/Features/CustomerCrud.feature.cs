// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.SpecFlowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserCanCreateUpdateReadAndDeleteCustomersFeature : object, Xunit.IClassFixture<UserCanCreateUpdateReadAndDeleteCustomersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CustomerCrud.feature"
#line hidden
        
        public UserCanCreateUpdateReadAndDeleteCustomersFeature(UserCanCreateUpdateReadAndDeleteCustomersFeature.FixtureData fixtureData, Mc2_CrudTest_SpecFlowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User can Create, Update, Read And Delete customers", "\"\"\"\r\nCustomer {\r\n\tFirstname\r\n\tLastname\r\n\tDateOfBirth\r\n\tPhoneNumber\r\n\tEmail\r\n\tBank" +
                    "AccountNumber\r\n}\r\n \r\nDomain\r\nApplication \r\nInfrastructure\r\nPresentation\r\n \r\n\"\"\"", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 20
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Description"});
            table1.AddRow(new string[] {
                        "101",
                        "Invalid Email"});
            table1.AddRow(new string[] {
                        "102",
                        "Invalid PhoneNumber"});
            table1.AddRow(new string[] {
                        "103",
                        "Invalid Bank Account Number"});
            table1.AddRow(new string[] {
                        "201",
                        "Duplicated FirstName, Lastname in data store"});
            table1.AddRow(new string[] {
                        "202",
                        "Duplicated Email"});
#line 21
  testRunner.Given("platform support following error codes", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User send query to Create, Update, Read and Delete customers")]
        [Xunit.TraitAttribute("FeatureTitle", "User can Create, Update, Read And Delete customers")]
        [Xunit.TraitAttribute("Description", "User send query to Create, Update, Read and Delete customers")]
        public virtual void UserSendQueryToCreateUpdateReadAndDeleteCustomers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User send query to Create, Update, Read and Delete customers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
this.FeatureBackground();
#line hidden
#line 31
    testRunner.Given("platform has \"0\" records of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table2.AddRow(new string[] {
                            "John",
                            "Doe",
                            "19-JUN-1999",
                            "+989050617876",
                            "john.doe@gmail.com",
                            "NL91RABO0317001297"});
#line 33
    testRunner.When("user send following request to create a new customer", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table3.AddRow(new string[] {
                            "John",
                            "Doe",
                            "19-JUN-1999",
                            "+989050617876",
                            "john.doe@gmail.com",
                            "NL91RABO0317001297"});
#line 36
    testRunner.Then("administrator can query and get \"1\" record of user with below information", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table4.AddRow(new string[] {
                            "John",
                            "Smith",
                            "19-JUN-1989",
                            "+989050617876",
                            "john.doe@gmail.com",
                            "NL91RABO0317001297"});
#line 40
    testRunner.When("user send following request to create a new customer", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code"});
                table5.AddRow(new string[] {
                            "202"});
#line 43
    testRunner.Then("user will receive following error codes", ((string)(null)), table5, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table6.AddRow(new string[] {
                            "Jeff",
                            "Smith",
                            "19-JUN-1989",
                            "+9050617876",
                            "john.doe@gmail.com",
                            "NL91RABO03170017"});
#line 47
    testRunner.When("user send following request to create a new customer", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code"});
                table7.AddRow(new string[] {
                            "103"});
                table7.AddRow(new string[] {
                            "102"});
                table7.AddRow(new string[] {
                            "202"});
#line 50
    testRunner.Then("user will receive following error codes", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table8.AddRow(new string[] {
                            "John",
                            "Smith",
                            "19-MAY-1999",
                            "+989050617877",
                            "john.smith@gmail.com",
                            "NL91RABO03170018"});
#line 56
    testRunner.When("user send following request to update a customer with email \"john.doe@gmail.com\" " +
                        "with following information", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table9.AddRow(new string[] {
                            "John",
                            "Smith",
                            "19-MAY-1999",
                            "+989050617877",
                            "john.smith@gmail.com",
                            "NL91RABO03170018"});
#line 59
    testRunner.Then("administrator can query and get \"1\" record of user with below information", ((string)(null)), table9, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "PhoneNumber",
                            "Email",
                            "BankAccountNumber"});
                table10.AddRow(new string[] {
                            "John",
                            "Doe",
                            "19-JUN-1999",
                            "+989050617876",
                            "john.doe@gmail.com",
                            "NL91RABO0317001297"});
#line 62
    testRunner.And("administrator can query and get \"0\" record of user with below information", ((string)(null)), table10, "And ");
#line hidden
#line 66
    testRunner.When("user send request to delete a customer with email \"john.smith@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("administrator query to get all customers and get \"0\" records of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UserCanCreateUpdateReadAndDeleteCustomersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UserCanCreateUpdateReadAndDeleteCustomersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
